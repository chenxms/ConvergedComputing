version: '3.8'

services:
  # 主应用服务
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: converged-computing-app
    restart: unless-stopped
    ports:
      - "8010:8000"
    command: ["python", "-m", "uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "4"]
    environment:
      # 数据库配置
      DATABASE_URL: ${DATABASE_URL:-mysql+pymysql://root:mysql_Lujing2022@117.72.14.166:23506/appraisal_test?charset=utf8mb4}
      
      # 应用配置
      PYTHONPATH: /app
      APP_ENV: ${APP_ENV:-production}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      
      # 性能配置
      WORKERS: ${WORKERS:-4}
      MAX_CONNECTIONS: ${MAX_CONNECTIONS:-100}
      POOL_SIZE: ${POOL_SIZE:-20}
      POOL_RECYCLE: ${POOL_RECYCLE:-3600}
      
      # 批处理配置
      BATCH_SIZE: ${BATCH_SIZE:-10}
      BATCH_TIMEOUT: ${BATCH_TIMEOUT:-300}
      
    volumes:
      # 日志目录
      - ./logs:/app/logs
      # 临时文件目录
      - ./temp:/app/temp
      # 文档目录（只读）
      - ./docs:/app/docs:ro
      # 验证报告输出
      - ./reports:/app/reports
      
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
      
    networks:
      - converged-network
    
    # 资源限制
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G

  subjects:
    image: convergedcomputing-app:latest
    container_name: subjects-v12-api
    restart: unless-stopped
    environment:
      DATABASE_URL: ${DATABASE_URL:-mysql+pymysql://root:mysql_Lujing2022@117.72.14.166:23506/appraisal_test?charset=utf8mb4}
      PYTHONPATH: /app
    command: ["python", "-m", "uvicorn", "app.subjects_api_main:app", "--host", "0.0.0.0", "--port", "8001", "--workers", "2"]
    ports:
      - "8011:8001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - converged-network

  # 批处理任务执行器
  batch-processor:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: converged-batch-processor
    restart: unless-stopped
    environment:
      DATABASE_URL: ${DATABASE_URL:-mysql+pymysql://root:mysql_Lujing2022@117.72.14.166:23506/appraisal_test?charset=utf8mb4}
      PYTHONPATH: /app
      BATCH_MODE: "true"
    # 通过环境变量 BATCH_CODE 控制物化批次，默认G7-2025
    command: ["python", "scripts/rewrite_subjects_v12.py", "${BATCH_CODE:-G7-2025}"]
    volumes:
      - ./logs:/app/logs
      - ./reports:/app/reports
    networks:
      - converged-network
    depends_on:
      - app
    profiles:
      - batch

  # 数据验证服务
  validator:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: converged-validator
    restart: no
    environment:
      DATABASE_URL: ${DATABASE_URL:-mysql+pymysql://root:mysql_Lujing2022@117.72.14.166:23506/appraisal_test?charset=utf8mb4}
      PYTHONPATH: /app
    command: ["python", "final_validation_report.py"]
    volumes:
      - ./reports:/app/reports
    networks:
      - converged-network
    depends_on:
      - app
    profiles:
      - validation

  # Redis缓存服务（可选）
  redis:
    image: redis:7-alpine
    container_name: converged-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - converged-network
    command: redis-server --appendonly yes
    profiles:
      - cache

  # Nginx反向代理（可选）
  nginx:
    image: nginx:alpine
    container_name: converged-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - converged-network
    depends_on:
      - app
    profiles:
      - production

networks:
  converged-network:
    driver: bridge

volumes:
  redis-data:
    driver: local
