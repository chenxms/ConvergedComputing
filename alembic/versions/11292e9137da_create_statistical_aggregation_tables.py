"""Create statistical aggregation tables

Revision ID: 11292e9137da
Revises: 
Create Date: 2025-09-05 04:03:24.407014

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '11292e9137da'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('batches',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('status', sa.String(length=50), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('batches', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_batches_id'), ['id'], unique=False)

    op.create_table('statistical_aggregations',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('batch_code', sa.String(length=50), nullable=False, comment='批次代码'),
    sa.Column('aggregation_level', sa.Enum('REGIONAL', 'SCHOOL', name='aggregationlevel'), nullable=False, comment='汇聚级别'),
    sa.Column('school_id', sa.String(length=50), nullable=True, comment='学校ID(学校级时必填)'),
    sa.Column('school_name', sa.String(length=100), nullable=True, comment='学校名称'),
    sa.Column('statistics_data', sa.JSON(), nullable=False, comment='统计数据JSON'),
    sa.Column('data_version', sa.String(length=10), nullable=False, comment='数据版本号'),
    sa.Column('calculation_status', sa.Enum('PENDING', 'PROCESSING', 'COMPLETED', 'FAILED', name='calculationstatus'), nullable=False, comment='计算状态'),
    sa.Column('total_students', sa.BigInteger(), nullable=True, comment='参与学生总数'),
    sa.Column('total_schools', sa.BigInteger(), nullable=True, comment='参与学校总数(区域级)'),
    sa.Column('calculation_duration', sa.DECIMAL(precision=8, scale=2), nullable=True, comment='计算耗时(秒)'),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('batch_code', 'aggregation_level', 'school_id', name='uk_batch_level_school'),
    comment='统计汇聚主表'
    )
    with op.batch_alter_table('statistical_aggregations', schema=None) as batch_op:
        batch_op.create_index('idx_aggregation_level', ['aggregation_level'], unique=False)
        batch_op.create_index('idx_batch_code', ['batch_code'], unique=False)
        batch_op.create_index('idx_calculation_status', ['calculation_status'], unique=False)
        batch_op.create_index('idx_created_at', ['created_at'], unique=False)
        batch_op.create_index('idx_school_id', ['school_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_statistical_aggregations_id'), ['id'], unique=False)

    op.create_table('statistical_metadata',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('metadata_type', sa.Enum('CALCULATION_RULE', 'GRADE_CONFIG', 'DIMENSION_CONFIG', 'FORMULA_CONFIG', name='metadatatype'), nullable=False, comment='元数据类型'),
    sa.Column('metadata_key', sa.String(length=100), nullable=False, comment='元数据键'),
    sa.Column('metadata_value', sa.JSON(), nullable=False, comment='元数据内容'),
    sa.Column('grade_level', sa.String(length=20), nullable=True, comment='适用年级'),
    sa.Column('subject_type', sa.Enum('EXAM', 'INTERACTIVE', 'SURVEY', name='subjecttype'), nullable=True, comment='适用科目类型'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='是否激活'),
    sa.Column('version', sa.String(length=10), nullable=False, comment='版本号'),
    sa.Column('description', sa.Text(), nullable=True, comment='配置描述'),
    sa.Column('created_by', sa.String(length=50), nullable=True, comment='创建者'),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('metadata_type', 'metadata_key', 'version', name='uk_type_key_version'),
    comment='统计元数据表'
    )
    with op.batch_alter_table('statistical_metadata', schema=None) as batch_op:
        batch_op.create_index('idx_grade_level', ['grade_level'], unique=False)
        batch_op.create_index('idx_is_active', ['is_active'], unique=False)
        batch_op.create_index('idx_metadata_key', ['metadata_key'], unique=False)
        batch_op.create_index('idx_metadata_type', ['metadata_type'], unique=False)
        batch_op.create_index(batch_op.f('ix_statistical_metadata_id'), ['id'], unique=False)

    op.create_table('tasks',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('batch_id', sa.BigInteger(), nullable=True),
    sa.Column('status', sa.String(length=50), nullable=True),
    sa.Column('progress', sa.Float(), nullable=True),
    sa.Column('started_at', sa.DateTime(), nullable=True),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('tasks', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_tasks_id'), ['id'], unique=False)

    op.create_table('statistical_history',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('aggregation_id', sa.BigInteger(), nullable=False, comment='关联statistical_aggregations.id'),
    sa.Column('change_type', sa.Enum('CREATED', 'UPDATED', 'DELETED', 'RECALCULATED', name='changetype'), nullable=False, comment='变更类型'),
    sa.Column('previous_data', sa.JSON(), nullable=True, comment='变更前数据快照'),
    sa.Column('current_data', sa.JSON(), nullable=True, comment='变更后数据快照'),
    sa.Column('change_summary', sa.JSON(), nullable=True, comment='变更摘要'),
    sa.Column('change_reason', sa.String(length=255), nullable=True, comment='变更原因'),
    sa.Column('triggered_by', sa.String(length=50), nullable=True, comment='触发者'),
    sa.Column('batch_code', sa.String(length=50), nullable=False, comment='批次代码(冗余字段便于查询)'),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['aggregation_id'], ['statistical_aggregations.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    comment='统计历史记录表'
    )
    with op.batch_alter_table('statistical_history', schema=None) as batch_op:
        batch_op.create_index('idx_aggregation_id', ['aggregation_id'], unique=False)
        batch_op.create_index('idx_batch_code', ['batch_code'], unique=False)
        batch_op.create_index('idx_change_type', ['change_type'], unique=False)
        batch_op.create_index('idx_created_at', ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_statistical_history_id'), ['id'], unique=False)

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('statistical_history', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_statistical_history_id'))
        batch_op.drop_index('idx_created_at')
        batch_op.drop_index('idx_change_type')
        batch_op.drop_index('idx_batch_code')
        batch_op.drop_index('idx_aggregation_id')

    op.drop_table('statistical_history')
    with op.batch_alter_table('tasks', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_tasks_id'))

    op.drop_table('tasks')
    with op.batch_alter_table('statistical_metadata', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_statistical_metadata_id'))
        batch_op.drop_index('idx_metadata_type')
        batch_op.drop_index('idx_metadata_key')
        batch_op.drop_index('idx_is_active')
        batch_op.drop_index('idx_grade_level')

    op.drop_table('statistical_metadata')
    with op.batch_alter_table('statistical_aggregations', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_statistical_aggregations_id'))
        batch_op.drop_index('idx_school_id')
        batch_op.drop_index('idx_created_at')
        batch_op.drop_index('idx_calculation_status')
        batch_op.drop_index('idx_batch_code')
        batch_op.drop_index('idx_aggregation_level')

    op.drop_table('statistical_aggregations')
    with op.batch_alter_table('batches', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_batches_id'))

    op.drop_table('batches')
    # ### end Alembic commands ###
